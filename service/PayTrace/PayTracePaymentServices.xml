<?xml version="1.0" encoding="UTF-8"?>
    <!--
    This software is in the public domain under CC0 1.0 Universal plus a 
    Grant of Patent License.

    To the extent possible under law, the author(s) have dedicated all
    copyright and related and neighboring rights to this software to the
    public domain worldwide. This software is distributed without any
    warranty.

    You should have received a copy of the CC0 Public Domain Dedication
    along with this software (see the LICENSE.md file). If not, see
    <http://creativecommons.org/publicdomain/zero/1.0/>.
    -->
    <services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">

        <!-- These services are based on the PayTrace API, version 1. See: http://help.paytrace.com/api -->

        <service verb="authorize" noun="Payment">
            <implements service="mantle.account.PaymentServices.authorize#Payment"/>
            <out-parameters>
                <parameter name="paymentGatewayResponseId"/>
                <parameter name="responseString" type="Map"/>
            </out-parameters>
            <actions>
                <entity-find-one entity-name="mantle.account.payment.Payment" value-field="payment"/>
                <if condition="payment == null"><return message="Payment ${paymentId} not found"/></if>
                <set field="paymentMethod" from="payment.'mantle.account.method.PaymentMethod'"/>
                <if condition="paymentMethod?.paymentMethodTypeEnumId != 'PmtCreditCard'">
                    <return error="true" message="Cannot authorize payment ${paymentId}, not a Credit Card payment."/>
                </if>
                
                <set field="creditCard" from="payment.'mantle.account.method.CreditCard'"/>
                <if condition="!cardSecurityCode">
                    <set field="cardSecurityCode" from="creditCard?.cardSecurityCode"/>
                </if>
                <if condition="cardSecurityCode == null"><return error="true" message="Cannot authorize payment ${paymentId}, must include a cardSecurityCode."/></if>

                <set field="visit" from="payment.'moqui.server.Visit'"/>

                <!-- if no gatewayCimId, store the PaymentMethod on CIM -->
                <if condition="!paymentMethod.gatewayCimId">
                    <service-call name="PayTrace.PayTraceServices.store#CustomerPaymentMethod"
                            in-map="[paymentMethodId:paymentMethod.paymentMethodId, paymentId:paymentId, paymentGatewayConfigId:paymentGatewayConfigId]"/>
                    <set field="paymentMethod" from="payment.'mantle.account.method.PaymentMethod'"/>
                </if>
                <!-- get party after CIM check so that gatewayCimId will be populated -->
                <set field="party" from="paymentMethod.'Owner#mantle.party.Party'"/>
                <if condition="!party.gatewayCimId"><return message="Party ${party.partyId} has no gateway CIM ID, not processing payment"/></if>
                <if condition="!paymentMethod.gatewayCimId"><return message="Payment Method ${paymentMethod.paymentMethodId} has no gateway CIM ID, not processing payment"/></if>

                <set field="postalAddress" from="paymentMethod.'mantle.party.contact.PostalAddress'"/>
                <script>
                    <![CDATA[requestString = """{
                        "amount":"${payment.amount}",
                        "credit_card":{
                            "number":"${creditCard?.cardNumber}",
                            "expiration_month":"${creditCard?.expireDate ? creditCard.expireDate.substring(0, creditCard.expireDate.indexOf('/')) : null}",
                            "expiration_year":"${creditCard?.expireDate ? creditCard.expireDate.substring(creditCard.expireDate.indexOf('/')+1) : null}"
                        },
                        "csc": "${cardSecurityCode ? cardSecurityCode: ''}",
                        "billing_address":{
                        "name":"${postalAddress?.toName}",
                        "street_address":"${postalAddress?.address1}",
                        "city":"${postalAddress?.city}",
                        "state":"${postalAddress?.stateProvinceGeoId ? postalAddress.stateProvinceGeoId.substring(postalAddress.stateProvinceGeoId.indexOf('_')+1) : null}",
                        "zip":"${postalAddress?.postalCode}"
                        }
                    }"""]]>	
                </script>
                <entity-find-one entity-name="PayTrace.PaymentGatewayPayTrace" value-field="pgpt"/>	
                <if condition="pgpt == null"><return error="true" message="No PaymentGatewayPayTrace found with ID ${paymentGatewayConfigId}"/></if>

                <service-call name="PayTrace.PayTracePaymentServices.payTrace#login" in-map="context" out-map="token"/>
                <set field="responseString" from="org.moqui.util.WebUtilities.simpleHttpStringRequest(pgpt.transactionUrl + '/'+pgpt.apiVersion+'/transactions/authorization/keyed', requestString, 'application/json',token.toString())"/>

                <set field="paymentOperationEnumId" value="PgoAuthorize"/>

                <service-call name="PayTrace.PayTracePaymentServices.save#Response" in-map="context" out-map="context"/>

            </actions>
        </service>
        <service verb="capture" noun="Payment">
            <implements service="mantle.account.PaymentServices.capture#Payment"/>
            <actions>
                <entity-find-one entity-name="mantle.account.payment.Payment" value-field="payment"/>
            <if condition="payment == null"><return message="Payment ${paymentId} not found"/></if>
            <set field="paymentMethod" from="payment.'mantle.account.method.PaymentMethod'"/>
            <if condition="paymentMethod?.paymentMethodTypeEnumId != 'PmtCreditCard'">
                <return error="true" message="Cannot capture payment ${paymentId}, not a Credit Card payment."/></if>

            <!-- if no gatewayCimId, store the PaymentMethod on CIM -->
            <if condition="!paymentMethod.gatewayCimId">
                <service-call name="AuthorizeDotNet.CimServices.store#CustomerPaymentMethod"
                        in-map="[paymentMethodId:paymentMethod.paymentMethodId, paymentId:paymentId]"/>
                <set field="paymentMethod" from="payment.'mantle.account.method.PaymentMethod'"/>
            </if>
            <!-- get party after CIM check so that gatewayCimId will be populated -->
            <set field="party" from="paymentMethod.'Owner#mantle.party.Party'"/>
            <if condition="!party.gatewayCimId"><return message="Party ${party.partyId} has no gateway CIM ID, not processing payment"/></if>
            <if condition="!paymentMethod.gatewayCimId"><return message="Payment Method ${paymentMethod.paymentMethodId} has no gateway CIM ID, not processing payment"/></if>

            <entity-find-one entity-name="AuthorizeDotNet.PaymentGatewayAuthorizeNet" value-field="pgan"/>
            <if condition="pgan == null"><log level="error" message="No PaymentGatewayAuthorizeNet found with ID ${paymentGatewayConfigId}"/><return/></if>

            <set field="paymentRefNum" from="payment.paymentRefNum"/>
            <if condition="!paymentRefNum">
                <service-call name="mantle.account.PaymentServices.get#AuthorizePaymentGatewayResponse" in-map="context" out-map="context"/>
                <if condition="paymentGatewayResponse == null"><return error="true" message="Could not find successful authorization for Payment ${paymentId}"/></if>
                <set field="paymentRefNum" from="paymentGatewayResponse.referenceNum"/>
            </if>
            <if condition="!paymentRefNum"><return error="true" message="Could not find authorization transaction ID (reference number) for Payment ${paymentId}"/></if>

                <script>
                    <![CDATA[requestString = """{
                        "transaction_id":"${paymentRefNum}"
                    }"""]]> 
                </script>

                <entity-find-one entity-name="PayTrace.PaymentGatewayPayTrace" value-field="pgpt"/> 
                <if condition="pgpt == null"><return error="true" message="No PaymentGatewayPayTrace found with ID ${paymentGatewayConfigId}"/></if>

                <service-call name="PayTrace.PayTracePaymentServices.payTrace#login" in-map="context" out-map="token"/>
                <set field="responseString" from="org.moqui.util.WebUtilities.simpleHttpStringRequest(pgpt.transactionUrl + '/'+pgpt.apiVersion+'/transactions/authorization/capture', requestString, 'application/json',token.toString())"/>

                <set field="paymentOperationEnumId" value="PgoCapture"/>
                <service-call name="PayTrace.PayTracePaymentServices.save#Response" in-map="context" out-map="context"/>
            </actions>
        </service>
        <service verb="authorizeAndCapture" noun="Payment">
            <description>This service is an alternative to the authorize and capture services, doing both in a single operation.
                If used should generally be configured as the Paytrace service with no capture service set.</description>
            <implements service="mantle.account.PaymentServices.authorize#Payment"/>
            <out-parameters>
                <parameter name="responseString"/>
            </out-parameters>
            <actions>
                <entity-find-one entity-name="mantle.account.payment.Payment" value-field="payment"/>
                <if condition="payment == null"><return message="Payment ${paymentId} not found"/></if>
                <set field="paymentMethod" from="payment.'mantle.account.method.PaymentMethod'"/>
                <if condition="paymentMethod?.paymentMethodTypeEnumId != 'PmtCreditCard'">
                    <return error="true" message="Cannot authorize and capture payment ${paymentId}, not a Credit Card payment."/></if>

                <if condition="!cardSecurityCode">
                    <set field="creditCard" from="payment.'mantle.account.method.CreditCard'"/>
                    <set field="cardSecurityCode" from="creditCard?.cardSecurityCode"/>
                </if>
                <if condition="cardSecurityCode == null"><return error="true" message="Cannot authorize payment ${paymentId}, must include a cardSecurityCode."/></if>

                <set field="postalAddress" from="paymentMethod.'mantle.party.contact.PostalAddress'"/>
               
                <script>
                    <![CDATA[requestString = """{
                        "amount":"${payment.amount}",
                        "credit_card":{
                            "number":"${creditCard?.cardNumber}",
                            "expiration_month":"${creditCard?.expireDate ? creditCard.expireDate.substring(0, creditCard.expireDate.indexOf('/')) : null}",
                            "expiration_year":"${creditCard?.expireDate ? creditCard.expireDate.substring(creditCard.expireDate.indexOf('/')+1) : null}"
                        },
                        "csc": "${cardSecurityCode ? cardSecurityCode: ''}",
                        "billing_address":{
                        "name":"${postalAddress?.toName}",
                        "street_address":"${postalAddress?.address1}",
                        "city":"${postalAddress?.city}",
                        "state":"${postalAddress?.stateProvinceGeoId ? postalAddress.stateProvinceGeoId.substring(postalAddress.stateProvinceGeoId.indexOf('_')+1) : null}",
                        "zip":"${postalAddress?.postalCode}"
                        }
                    }"""]]> 
                </script>

                <entity-find-one entity-name="PayTrace.PaymentGatewayPayTrace" value-field="pgpt"/> 
                <if condition="pgpt == null"><return error="true" message="No PaymentGatewayPayTrace found with ID ${paymentGatewayConfigId}"/></if>

                <service-call name="PayTrace.PayTracePaymentServices.payTrace#login" in-map="context" out-map="token"/>
                <set field="responseString" 
                from="org.moqui.util.WebUtilities.simpleHttpStringRequest(pgpt.transactionUrl + '/'+pgpt.apiVersion+'/transactions/sale/keyed', requestString, 'application/json',token.toString())"/>

                <set field="paymentOperationEnumId" value="PgoAuthAndCapture"/>
                <service-call name="PayTrace.PayTracePaymentServices.save#Response" in-map="context" out-map="context"/>
            </actions>
        </service>
        <service verb="refund" noun="Payment">
            <implements service="mantle.account.PaymentServices.refund#Payment"/>
            <actions>
                <entity-find-one entity-name="mantle.account.payment.Payment" value-field="payment"/>
                <if condition="payment == null"><return message="Payment ${paymentId} not found"/></if>
                <set field="paymentMethod" from="payment.'mantle.account.method.PaymentMethod'"/>
                <if condition="paymentMethod?.paymentMethodTypeEnumId != 'PmtCreditCard'">
                    <return error="true" message="Cannot authorize and capture payment ${paymentId}, not a Credit Card payment."/></if>

                <if condition="!cardSecurityCode">
                    <set field="creditCard" from="payment.'mantle.account.method.CreditCard'"/>
                    <set field="cardSecurityCode" from="creditCard?.cardSecurityCode"/>
                </if>
                <if condition="cardSecurityCode == null"><return error="true" message="Cannot authorize payment ${paymentId}, must include a cardSecurityCode."/></if>
                
                <set field="postalAddress" from="paymentMethod.'mantle.party.contact.PostalAddress'"/>

                <script>
                    <![CDATA[requestString = """{
                        "amount":"${payment.amount}",
                        "credit_card":{
                            "number":"${creditCard?.cardNumber}",
                            "expiration_month":"${creditCard?.expireDate ? creditCard.expireDate.substring(0, creditCard.expireDate.indexOf('/')) : null}",
                            "expiration_year":"${creditCard?.expireDate ? creditCard.expireDate.substring(creditCard.expireDate.indexOf('/')+1) : null}"
                        },
                        "csc": "${cardSecurityCode ? cardSecurityCode: ''}",
                        "billing_address":{
                        "name":"${postalAddress?.toName}",
                        "street_address":"${postalAddress?.address1}",
                        "city":"${postalAddress?.city}",
                        "state":"${postalAddress?.stateProvinceGeoId ? postalAddress.stateProvinceGeoId.substring(postalAddress.stateProvinceGeoId.indexOf('_')+1) : null}",
                        "zip":"${postalAddress?.postalCode}"
                        }
                    }"""]]> 
                </script>
                <entity-find-one entity-name="PayTrace.PaymentGatewayPayTrace" value-field="pgpt"/> 
                <if condition="pgpt == null"><return error="true" message="No PaymentGatewayPayTrace found with ID ${paymentGatewayConfigId}"/></if>

                <service-call name="PayTrace.PayTracePaymentServices.payTrace#login" in-map="context" out-map="token"/>
                <set field="responseString" 
                from="org.moqui.util.WebUtilities.simpleHttpStringRequest(pgpt.transactionUrl + '/'+pgpt.apiVersion+'/transactions/refund/keyed', requestString, 'application/json',token.toString())"/>

                <set field="paymentOperationEnumId" value="PgoRefund"/>
                <service-call name="PayTrace.PayTracePaymentServices.save#Response" in-map="context" out-map="context"/>
            </actions>
        </service>
        <service verb="release" noun="Payment">
            <implements service="mantle.account.PaymentServices.release#Payment"/>
            <actions>
                <entity-find-one entity-name="mantle.account.payment.Payment" value-field="payment"/>
                <if condition="payment == null"><return message="Payment ${paymentId} not found"/></if>
                <set field="paymentMethod" from="payment.'mantle.account.method.PaymentMethod'"/>
                <if condition="paymentMethod?.paymentMethodTypeEnumId != 'PmtCreditCard'">
                    <return error="true" message="Cannot release authorization for payment ${paymentId}, not a Credit Card payment."/>
                </if>
                <!-- if no gatewayCimId, store the PaymentMethod on CIM -->
                <if condition="!paymentMethod.gatewayCimId">
                    <service-call name="PayTrace.PayTraceServices.store#CustomerPaymentMethod"
                            in-map="[paymentMethodId:paymentMethod.paymentMethodId, paymentId:paymentId, paymentGatewayConfigId:paymentGatewayConfigId]"/>
                    <set field="paymentMethod" from="payment.'mantle.account.method.PaymentMethod'"/>
                </if>
                <!-- get party after CIM check so that gatewayCimId will be populated -->
                <set field="party" from="paymentMethod.'Owner#mantle.party.Party'"/>
                <if condition="!party.gatewayCimId"><return message="Party ${party.partyId} has no gateway CIM ID, not processing payment"/></if>
                <if condition="!paymentMethod.gatewayCimId"><return message="Payment Method ${paymentMethod.paymentMethodId} has no gateway CIM ID, not processing payment"/></if>
 
                <entity-find-one entity-name="PayTrace.PaymentGatewayPayTrace" value-field="pgpt"/> 
                <if condition="pgpt == null"><return error="true" message="No PaymentGatewayPayTrace found with ID ${paymentGatewayConfigId}"/></if>

                <set field="paymentRefNum" from="payment.paymentRefNum"/>
                <if condition="!paymentRefNum">
                     <service-call name="mantle.account.PaymentServices.get#AuthorizePaymentGatewayResponse" in-map="context" out-map="context"/>
                     <if condition="!paymentGatewayResponse"><return error="true" message="Could not find successful authorization for Payment ${paymentId}"/></if>
                    <set field="paymentRefNum" from="paymentGatewayResponse.referenceNum"/>
                </if>
                <if condition="!paymentRefNum"><return error="true" message="Could not find authorization transaction ID (reference number) for Payment ${paymentId}"/></if>

                <script><![CDATA[requestString = """{
                    "transaction_id":"${paymentRefNum}"
                    }"""]]> 
                </script>

                <service-call name="PayTrace.PayTracePaymentServices.payTrace#login" in-map="context" out-map="token"/>

                <set field="paymentOperationEnumId" value="PgoRelease"/>
                <set field="responseString" 
                from="org.moqui.util.WebUtilities.simpleHttpStringRequest(pgpt.transactionUrl + '/'+pgpt.apiVersion+'/transactions/authorization/capture', requestString, 'application/json',token.toString())"/>

                <service-call name="PayTrace.PayTracePaymentServices.save#Response" in-map="context" out-map="context"/>

            </actions>
        </service>
        <service verb="get" noun="PaymentGatewayDetails">
            <implements service="mantle.account.PaymentServices.get#PaymentGatewayDetails"/>
            <out-parameters>
                <parameter name="transactionStatus"/>
            </out-parameters>
            <actions>
                <entity-find-one entity-name="mantle.account.payment.Payment" value-field="payment"/>
                <if condition="payment == null"><return message="Payment ${paymentId} not found"/></if>
                <set field="paymentMethod" from="payment.'mantle.account.method.PaymentMethod'"/>
                <if condition="paymentMethod?.paymentMethodTypeEnumId != 'PmtCreditCard'">
                    <return message="Cannot get transaction details for payment ${paymentId}, not a Credit Card payment."/></if>

                <entity-find-one entity-name="PayTrace.PaymentGatewayPayTrace" value-field="pgpt"/> 
                <if condition="pgpt == null"><return error="true" message="No PaymentGatewayPayTrace found with ID ${paymentGatewayConfigId}"/></if>

                <set field="referenceNum" from="payment.paymentRefNum"/>
                <if condition="!referenceNum">
                    <service-call name="mantle.account.PaymentServices.get#AuthorizePaymentGatewayResponse" in-map="context" out-map="context"/>
                    <set field="referenceNum" from="paymentGatewayResponse?.referenceNum"/>
                </if>
                <if condition="!referenceNum"><return message="Could not find transaction ID (reference number) for Payment ${paymentId}"/></if>

                <set field="paymentOperationEnumId" value="PgoTxDetails"/>

                <script><![CDATA[requestString = """{
                    "transaction_id":"${referenceNum}"
                    }"""]]> 
                </script>

                <service-call name="PayTrace.PayTracePaymentServices.payTrace#login" in-map="context" out-map="token"/>

                <set field="responseString" 
                from="org.moqui.util.WebUtilities.simpleHttpStringRequest(pgpt.transactionUrl + '/'+pgpt.apiVersion+'/transactions/export/by_id', requestString, 'application/json',token.toString())"/>

                <!-- PayTrace transactionType values and corresponding Payment statusId to determine needed action:
            
                SALE           PmntDelivered
                AUTHORIZATION  PmntAuthorized
                REFUND         PmntConfirmed 
                VOID           PmntVoid
                CAPTURE        PmntDelivered
                FORCESALE      PmntDelivered
                SETTLED        PmntConfirmed 
                PENDING        PmntDelivered
                DECLINED       PmntDeclined
                -->
                <set field="responseNode" from="new groovy.json.JsonSlurper().parseText(responseString)"/>
                
                <set field="transactionStatus" from="responseNode.transaction_type"/>
                <if condition="transactionStatus">
                    <set field="authNetStatusMap" from="[AUTHORIZATION:'PmntAuthorized',
                        REFUND:'PmntConfirmed', SALE:'PmntDelivered',FORCESALE:'PmntDelivered', 
                        CAPTURE:'PmntDelivered', SETTLED:'PmntConfirmed', PENDING:'PmntDelivered',
                        DECLINED:'PmntDeclined', VOID:'PmntVoid']"/>
                    <set field="gatewayStatusId" from="authNetStatusMap.get(transactionStatus.trim())"/>
                </if>

                <set field="referenceNum" from="responseNode.transactions?.transaction_id"/>

                <if condition="!gatewayStatusId || gatewayStatusId != payment.statusId">
                    <!-- save PaymentGatewayResponse including transaction status -->
                    <set field="responseCode" from="responseNode.success"/>
                    <set field="reasonCode" from="responseNode.transactions?.approval_code"/>
                    <set field="reasonMessage" from="responseNode.transactions.approval_message"/>
                    <set field="statusCode" from="responseNode.transactions?.status_code"/>

                    <service-call name="create#mantle.account.method.PaymentGatewayResponse" out-map="context"
                        in-map="[paymentGatewayConfigId:paymentGatewayConfigId, paymentOperationEnumId:paymentOperationEnumId,
                            paymentId:payment.paymentId, paymentMethodId:payment.paymentMethodId, referenceNum:referenceNum,
                            amount:payment.amount, amountUomId:payment.amountUomId, transactionDate:ec.user.nowTimestamp,
                            responseCode:responseCode, reasonCode:reasonCode, reasonMessage:reasonMessage,
                            resultError:(responseCode ? 'N' : 'Y'), resultDeclined:(statusCode == 'N' ? 'Y' : 'N'),
                            transactionStatus:transactionStatus]"/>
                </if>
                
                
            </actions>      
        </service>
        <service verb="get" noun="PaymentGatewayInfo">
        <in-parameters><parameter name="paymentId" required="true"/></in-parameters>
        <out-parameters><parameter name="paymentInfoMap" type="Map"/></out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.account.payment.Payment" value-field="payment"/>
            <set field="creditCard" from="payment.'mantle.account.method.CreditCard'"/>
            <if condition="!creditCard"><return error="true" message="Cannot not process payment [${paymentId}], not a Credit Card payment."/></if>
            <set field="paymentMethod" from="payment.'mantle.account.method.PaymentMethod'"/>

            <set field="postalAddress" from="paymentMethod.'mantle.party.contact.PostalAddress'"/>
            <if condition="!postalAddress"><return error="true" message="Cannot not process payment [${paymentId}], no Address associated with Credit Card [${paymentId}]."/></if>
            <set field="telecomNumber" from="paymentMethod.'mantle.party.contact.TelecomNumber'"/>
            <set field="phone" from="(telecomNumber?.countryCode ? (telecomNumber.countryCode + '-') : '') + (telecomNumber?.areaCode ? (telecomNumber.areaCode + '-') : '') + telecomNumber?.contactNumber"/>
            <set field="emailContactMech" from="paymentMethod.'Email#mantle.party.contact.ContactMech'"/>
            <set field="visit" from="payment.'moqui.server.Visit'"/>

            <!-- valid values for AIM are V (Visa), M (Master Card), A (AmEx), D (Discover), J (JCB), C (Diners Club);
                all type values have "Cct" and the 4th character (index 3) matches this pattern for existing records -->
            <set field="cardTypeCode" from="creditCard.creditCardTypeEnumId?.charAt(3)"/>
            <!-- TODO, future: support x_method:'ECHECK' for BankAccount records -->
            <set field="paymentInfoMap" from="[x_method:'CC',
                    x_amount:toPlainString(payment.amount), x_currency_code:payment.amountUomId,
                    x_card_num:creditCard.cardNumber, x_exp_date:creditCard.expireDate,
                    x_card_code:creditCard.cardSecurityCode, x_card_type:cardTypeCode,
                    x_first_name:paymentMethod.firstNameOnAccount, x_last_name:paymentMethod.lastNameOnAccount,
                    x_company:paymentMethod.companyNameOnAccount,
                    x_address:postalAddress.address1, x_city:postalAddress.city, x_state:postalAddress.stateProvinceGeoId,
                    x_zip:postalAddress.postalCode, x_country:postalAddress.countryGeoId, x_phone:phone,
                    x_email:emailContactMech?.infoString, x_cust_id:payment.fromPartyId, x_customer_ip:visit?.clientIpAddress,
                    x_invoice_num:payment.orderId]"/>
            <!-- TODO, future: maybe send x_description, x_po_num -->
        </actions>
    </service>
    <service verb="get" noun="AuthGatewayInfo">
        <in-parameters><parameter name="paymentId" required="true"/></in-parameters>
        <out-parameters><parameter name="authInfoMap" type="Map"/></out-parameters>
        <actions>
            <service-call name="mantle.account.PaymentServices.get#AuthorizePaymentGatewayResponse" in-map="context" out-map="context"/>
            <if condition="!paymentGatewayResponse"><return error="true" message="Could not find successful authorization for Payment ${paymentId}"/></if>

            <set field="authInfoMap" from="[x_trans_id:paymentGatewayResponse.referenceNum,
                    x_auth_code:paymentGatewayResponse.approvalCode]"/>
        </actions>
    </service>

        <service verb="save" noun="Response">
            <in-parameters>
                <parameter name="paymentId"/>
                <parameter name="paymentMethodId"/>
                <parameter name="paymentGatewayConfigId"/>
                <parameter name="paymentOperationEnumId" required="true"/>
                <parameter name="responseString" required="true"/>
            </in-parameters>
            <out-parameters>
                <parameter name="paymentGatewayResponseId"/>
            </out-parameters>
            <actions>
                <entity-find-one entity-name="mantle.account.payment.Payment" value-field="payment"/>
                <if condition="payment &amp;&amp; !paymentMethodId"><set field="paymentMethodId" from="payment.paymentMethodId"/></if>
                <set field="responseNode" from="new groovy.json.JsonSlurper().parseText(responseString)"/>
                <set field="responseCode" from="responseNode.success"/>
                <set field="approvalCode" from="responseNode.approval_code"/>
                <set field="avsResult" from="responseNode.avs_response"/>
                <set field="cvResult" from="responseNode.csc_response"/>
                <set field="reasonCode" from="responseNode.response_code"/>
                <set field="reasonMessage" from="responseNode.status_message"/>
                <set field="referenceNum" from="responseNode.transaction_id"/>
                <set field="errors" from="responseNode?.errors"/>
                <set field="badCardNumber" from="errors?.'35'"/>
                <set field="badExpireMonth" from="errors?.'43'"/>
                <set field="badExpireYear" from="errors?.'44'"/>

                <service-call name="create#mantle.account.method.PaymentGatewayResponse" out-map="context"
                    in-map="[paymentGatewayConfigId:paymentGatewayConfigId, paymentOperationEnumId:paymentOperationEnumId,
                        paymentId:paymentId, paymentMethodId:paymentMethodId,
                        amount:payment.amount, amountUomId:payment?.amountUomId, referenceNum:referenceNum,
                        approvalCode:approvalCode, responseCode:responseCode,
                        reasonCode:reasonCode, reasonMessage:reasonMessage,
                        avsResult:avsResult, cvResult:cvResult,
                        transactionDate:ec.user.nowTimestamp,
                        resultSuccess:(reasonCode == 101 || reasonCode == 112 ? 'Y' : 'N'), resultDeclined:(reasonCode == 102 || reasonCode 113 ? 'Y' : 'N'),
                        resultError:(reasonCode == 1 ? 'Y' : 'N'),
                        resultBadExpire:(badExpireMonth || badExpireYear ? 'Y' : 'N'),
                        resultBadCardNumber:(badCardNumber ? 'Y' : 'N')]"/>
            </actions>
        </service>

        <service verb="payTrace" noun="login">
            <in-parameters>
                <parameter name="paymentGatewayConfigId"/>
            </in-parameters>
            <out-parameters>
               <parameter name="token"/>
            </out-parameters>
            <actions>
                <entity-find-one entity-name="PayTrace.PaymentGatewayPayTrace" value-field="pgpt"/>	
                <if condition="pgpt == null"><return error="true" message="No PaymentGatewayPayTrace found with ID ${paymentGatewayConfigId}"/></if>
                <script><![CDATA[requestString = """{
                    "grant_type": "password",
                    "username": "${pgpt.username}",
                    "password": "${pgpt.password}"
                    }"""]]>	
                </script>
                <set field="token" from="org.moqui.util.WebUtilities.simpleHttpStringRequest(pgpt.transactionUrl + '/oauth/token', requestString, 'application/json')"/>
            </actions>
        </service>
    </services> 
  