<?xml version="1.0" encoding="UTF-8"?>
    <!--
    This software is in the public domain under CC0 1.0 Universal plus a 
    Grant of Patent License.

    To the extent possible under law, the author(s) have dedicated all
    copyright and related and neighboring rights to this software to the
    public domain worldwide. This software is distributed without any
    warranty.

    You should have received a copy of the CC0 Public Domain Dedication
    along with this software (see the LICENSE.md file). If not, see
    <http://creativecommons.org/publicdomain/zero/1.0/>.
    -->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">

    <!-- These services are based on the PayTrace API, version 1. See: http://help.paytrace.com/api -->

    <service verb="authorize" noun="Payment">
        <implements service="mantle.account.PaymentServices.authorize#Payment"/>
        <out-parameters>
            <parameter name="paymentGatewayResponseId"/>
            <parameter name="responseMap" type="Map"/>
            <parameter name="response" type="Map"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.account.payment.Payment" value-field="payment"/>
            <if condition="payment == null"><return message="Payment ${paymentId} not found"/></if>
            <set field="paymentMethod" from="payment.'mantle.account.method.PaymentMethod'"/>
            <if condition="paymentMethod?.paymentMethodTypeEnumId != 'PmtCreditCard'">
                <return error="true" message="Cannot authorize payment ${paymentId}, not a Credit Card payment."/>
            </if>
                
            <set field="creditCard" from="payment.'mantle.account.method.CreditCard'"/>
            <if condition="!cardSecurityCode">
                <set field="cardSecurityCode" from="creditCard?.cardSecurityCode"/>
            </if>

            <set field="visit" from="payment.'moqui.server.Visit'"/>

            <!-- if no gatewayCimId, store the PaymentMethod on CIM -->
            <if condition="!paymentMethod.gatewayCimId">
                <service-call name="PayTrace.PayTraceVaultServices.store#CustomerPaymentMethod"
                            in-map="[paymentMethodId:paymentMethod.paymentMethodId, paymentId:paymentId, paymentGatewayConfigId:paymentGatewayConfigId]"/>
                <set field="paymentMethod" from="payment.'mantle.account.method.PaymentMethod'"/>
            </if>
            <!-- get party after CIM check so that gatewayCimId will be populated -->
            <set field="party" from="paymentMethod.'Owner#mantle.party.Party'"/>
            <if condition="!party.gatewayCimId"><return message="Party ${party.partyId} has no gateway CIM ID, not processing payment"/></if>
            <if condition="!paymentMethod.gatewayCimId"><return message="Payment Method ${paymentMethod.paymentMethodId} has no gateway CIM ID, not processing payment"/></if>

            <entity-find-one entity-name="PayTrace.PaymentGatewayPayTrace" value-field="pgpt"/> 
            <if condition="pgpt == null"><return error="true" message="No PaymentGatewayPayTrace found with ID ${paymentGatewayConfigId}"/></if>
            <service-call name="PayTrace.PayTraceVaultPaymentServices.payTrace#login" in-map="context" out-map="token"/>

            <!-- assemble the full request Map -->
            <set field="requestMap" from="[amount:payment.amount, customer_id:paymentMethod.gatewayCimId, integrator_id: pgpt.integratorId]"/>

            <script><![CDATA[
                org.moqui.util.RestClient restClient = ec.service.rest().method(org.moqui.util.RestClient.POST)
                .addHeader("Authorization", "bearer ${token.token.access_token}")
                .addHeader("Content-Type", "application/json").jsonObject(requestMap)
                restClient.uri().protocol("https").host(pgpt.hostName).port(443).path(pgpt.apiVersion).path("transactions").path("authorization").path("by_customer").build()
                org.moqui.util.RestClient.RestResponse restResponse = restClient.call()
                    
                if (restResponse.statusCode < 200 || restResponse.statusCode >= 500) {
                    ec.logger.error("PayTrace API response ${restResponse.statusCode}")
                    ec.message.addMessage("PayTrace API error")
                    return
                }
                responseMap = restResponse.jsonObject()
            ]]></script>
                
            <set field="paymentOperationEnumId" value="PgoAuthorize"/>

            <service-call name="PayTrace.PayTraceVaultPaymentServices.save#Response" in-map="context" out-map="context"/>
            
            <if condition="creditCard.creditCardTypeEnumId == 'CctVisa' 
                || creditCard.creditCardTypeEnumId == 'CctMastercard'">
                <service-call name="PayTrace.PayTraceVaultPaymentServices.send#LevelThreeData" in-map="[
                paymentId:paymentId, paymentGatewayConfigId:paymentGatewayConfigId, paymentMethodId:paymentMethodId]" out-map="response"/>
            </if>
        </actions>
    </service>
    <service verb="send" noun="LevelThreeData">
        <in-parameters>
            <parameter name="paymentId"/>
            <parameter name="paymentGatewayConfigId"/>
            <parameter name="paymentMethodId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="requestMap" type="Map"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.account.payment.Payment" value-field="payment"/>

            <set field="paymentRefNum" from="payment.paymentRefNum"/>
            <set field="paymentMethod" from="payment.'mantle.account.method.PaymentMethod'"/>
            
            <set field="creditCard" from="payment.'mantle.account.method.CreditCard'"/>
            <set field="postalAddress" from="paymentMethod.'mantle.party.contact.PostalAddress'"/>

            <set field="partyId" from="payment.fromPartyId"/>
            <set field="partyIdTypeEnumId" from="'PtidFein'"/>
            <entity-find-one entity-name="mantle.party.PartyIdentification" value-field="partyCustomer"/> 
            
            <set field="partyId" from="payment.toPartyId"/>
            <entity-find-one entity-name="mantle.party.PartyIdentification" value-field="partyVendor"/>

            <entity-find-one entity-name="PayTrace.PaymentGatewayPayTrace" value-field="pgpt"/> 
            <if condition="pgpt == null"><return error="true" message="No PaymentGatewayPayTrace found with ID ${paymentGatewayConfigId}"/></if>
            <service-call name="PayTrace.PayTraceVaultPaymentServices.payTrace#login" in-map="context" out-map="token"/>

            <set field="orderId" from="payment.orderId"/>

            <service-call name="mantle.order.OrderInfoServices.get#OrderDisplayInfo" in-map="[orderId:orderId]" out-map="orderInfo"/>
            
            <set field="lineItems" from="[]"/>
            <set field="discountAmount" from="0"/>
            <set field="taxAmount" from="0"/>
            <set field="freightAmount" from="0"/>
            <iterate list="orderInfo.orderItemList" entry="orderItem">
                <if condition="orderItem.parentItemSeqId == null">
                    
                    <if condition="orderItem.itemTypeEnumId == 'ItemShipping'">
                        <set field="freightAmount" from="freightAmount + orderItem.unitAmount"/>
                        <else>
                            <service-call name="mantle.order.OrderServices.get#OrderItemTotal" in-map="[orderItem:orderItem,getChildrenTotals:true]" out-map="orderItemData"/>
                    
                            <if condition="orderItem.itemTypeEnumId == 'ItemSalesTax' || orderItem.itemTypeEnumId == 'ItemVatTax'">
                                <set field="taxAmount" from="taxAmount + orderItem.unitAmount"/>
                            </if>



                            <if condition="creditCard.creditCardTypeEnumId == 'CctVisa'">
                                <!--Missing mto find in line item data Visa
                                    additional_tax_amount
                                    additional_tax_rate
                                    commodity_code
                                    discount_amount
                                    unit_of_measure
                                -->
                                <if condition="orderItemData.itemPlusChildrenTotal &gt;= 0">
                                    <set field="item" from="[amount: orderItemData.itemPlusChildrenTotal, 
                                    description: orderItem.itemDescription.take(35), product_id: orderItem.productId, 
                                    quantity: orderItem.quantity ? orderItem.quantity : 1.0, 
                                    unit_cost: orderItem.unitAmount ?: 0.0]"/>
                                </if>
                            </if>

                            <if condition="creditCard.creditCardTypeEnumId == 'CctMastercard'">
                                <!--Missing to find in line item data Mastercard
                                    additional_tax_amount
                                    additional_tax_included
                                    additional_tax_rate
                                    discount_amount
                                    discount_rate
                                    discount_included
                                    merchant_tax_id
                                    tax_included
                                    unit_of_measure
                                -->
                                <set field="item" from="[amount: Math.abs(orderItemData.itemPlusChildrenTotal), 
                                description:orderItem.itemDescription.take(35), 
                                debit_or_credit: orderItemData.itemPlusChildrenTotal &lt; 0 ? 'C' : 'D' , product_id: orderItem.productId, quantity: orderItem.quantity ? orderItem.quantity : 1.0, 
                                unit_cost: orderItem.unitAmount ?: 0.0]"/>
                            </if>
                    
                            <set field="discountAmount" from="discountAmount + Math.abs(orderItemData.itemPlusChildrenTotal)"/>

                            <script>
                                lineItems.add(item)
                            </script>
                        </else>
                    </if>
                </if>
            </iterate>
 
            <set field="discountAmount" from="discountAmount - payment.amount"/>
            <if condition="creditCard.creditCardTypeEnumId == 'CctVisa'">
                <!--Missing to find data Visa
                    national_tax_amount          for now it is ignored
                    commodity_code               still not compatible
                    duty_amount                  for now it is ignored
                    additional_tax_amount
                    additional_tax_rate
                -->
                <!-- assemble the full request Map -->
                <set field="additionalTax" from="freightAmount + taxAmount"/>
                <set field="requestMap" from="[transaction_id:paymentRefNum, invoice_id:orderId, customer_reference_id:paymentMethodId, tax_amount: taxAmount == 0 ? -1 : taxAmount, merchant_tax_id:partyVendor.idValue,customer_tax_id: partyCustomer.idValue, discount_amount:discountAmount, freight_amount:freightAmount, additional_tax_amount:additionalTax , source_address:[zip:postalAddress.postalCode], shipping_address:[zip:orderInfo.orderPartInfoList.postalAddress.postalCode, country:orderInfo.orderPartInfoList.postalAddress?.stateProvinceGeoId ? orderInfo.orderPartInfoList.postalAddress.stateProvinceGeoId.toString().substring(1, 4) : null], line_items:[lineItems]]"/>
                <set field="url" value="visa"/>
            </if>

            <if condition="creditCard.creditCardTypeEnumId == 'CctMastercard'">
                <!--Missing to find data Mastercard
                    national_tax_amount          for now it is ignored
                    duty_amount                  for now it is ignored
                    additional_tax_amount
                    additional_tax_included
                -->
                <!-- assemble the full request Map -->
                <set field="additionalTax" from="freightAmount + taxAmount"/>
                <set field="requestMap" from="[transaction_id:paymentRefNum, invoice_id:orderId, customer_reference_id:paymentMethodId, tax_amount: taxAmount == 0 ? -1 : taxAmount, freight_amount:freightAmount, additional_tax_amount:additionalTax, additional_tax_included: additional_tax_amount == 0 ? false : true, source_address:[zip:postalAddress.postalCode], shipping_address:[zip:orderInfo.orderPartInfoList.postalAddress.postalCode, country:orderInfo.orderPartInfoList.postalAddress?.stateProvinceGeoId ? orderInfo.orderPartInfoList.postalAddress.stateProvinceGeoId.toString().substring(1, 4) : null], 
                line_items:lineItems]"/>
                <set field="url" value="mastercard"/>
            </if>

          <!--  <if condition="url == null">
                <return error="true" message="the type of card is not a mastercard or visa. the level 3 data transaction will not continue"/>
            </if>

            <script><![CDATA[
                org.moqui.util.RestClient restClient = ec.service.rest().method(org.moqui.util.RestClient.POST)
                .addHeader("Authorization", "bearer ${token.token.access_token}")
                .addHeader("Content-Type", "application/json").jsonObject(requestMap)
                restClient.uri().protocol("https").host(pgpt.hostName).port(443).path(pgpt.apiVersion).path("level_three").path(url).build()
                org.moqui.util.RestClient.RestResponse restResponse = restClient.call()
                    
                if (restResponse.statusCode < 200 || restResponse.statusCode >= 500) {
                    ec.logger.error("PayTrace API response ${restResponse.statusCode}")
                    ec.message.addMessage("PayTrace API error")
                    return
                }
                responseMap = restResponse.jsonObject()
            ]]></script> -->
        </actions>
    </service>
    <service verb="capture" noun="Payment">
        <implements service="mantle.account.PaymentServices.capture#Payment"/>
        <actions>
            <entity-find-one entity-name="mantle.account.payment.Payment" value-field="payment"/>
            <if condition="payment == null"><return message="Payment ${paymentId} not found"/></if>
            <set field="paymentMethod" from="payment.'mantle.account.method.PaymentMethod'"/>
            <if condition="paymentMethod?.paymentMethodTypeEnumId != 'PmtCreditCard'">
                <return error="true" message="Cannot capture payment ${paymentId}, not a Credit Card payment."/>
            </if>

            <!-- if no gatewayCimId, store the PaymentMethod on CIM -->
            <if condition="!paymentMethod.gatewayCimId">
                <service-call name="PayTrace.PayTraceVaultServices.store#CustomerPaymentMethod" in-map="[paymentMethodId:paymentMethod.paymentMethodId, paymentId:paymentId, paymentGatewayConfigId:paymentGatewayConfigId]"/>
                <set field="paymentMethod" from="payment.'mantle.account.method.PaymentMethod'"/>
            </if>
            <!-- get party after CIM check so that gatewayCimId will be populated -->
            <set field="party" from="paymentMethod.'Owner#mantle.party.Party'"/>
            <if condition="!party.gatewayCimId"><return message="Party ${party.partyId} has no gateway CIM ID, not processing payment"/></if>
            <if condition="!paymentMethod.gatewayCimId"><return message="Payment Method ${paymentMethod.paymentMethodId} has no gateway CIM ID, not processing payment"/></if>

            <set field="paymentRefNum" from="payment.paymentRefNum"/>
            <if condition="!paymentRefNum">
                <service-call name="mantle.account.PaymentServices.get#AuthorizePaymentGatewayResponse" in-map="context" out-map="context"/>
                <if condition="paymentGatewayResponse == null"><return error="true" message="Could not find successful authorization for Payment ${paymentId}"/></if>
                <set field="paymentRefNum" from="paymentGatewayResponse.referenceNum"/>
            </if>
            <if condition="!paymentRefNum"><return error="true" message="Could not find authorization transaction ID (reference number) for Payment ${paymentId}"/></if>
                
            <!-- assemble the full request Map -->
            <set field="requestMap" from="[transaction_id:paymentRefNum]"/>

            <entity-find-one entity-name="PayTrace.PaymentGatewayPayTrace" value-field="pgpt"/> 
            <if condition="pgpt == null"><return error="true" message="No PaymentGatewayPayTrace found with ID ${paymentGatewayConfigId}"/></if>

            <service-call name="PayTrace.PayTraceVaultPaymentServices.payTrace#login" in-map="context" out-map="token"/>
                
            <script><![CDATA[
                org.moqui.util.RestClient restClient = ec.service.rest().method(org.moqui.util.RestClient.POST)
                .addHeader("Authorization", "bearer ${token.token.access_token}")
                .addHeader("Content-Type", "application/json").jsonObject(requestMap)
                restClient.uri().protocol("https").host(pgpt.hostName).port(443).path(pgpt.apiVersion).path("transactions").path("authorization").path("capture").build()
                org.moqui.util.RestClient.RestResponse restResponse = restClient.call()
                    
                if (restResponse.statusCode < 200 || restResponse.statusCode >= 500) {
                    ec.logger.error("PayTrace API response ${restResponse.statusCode}")
                    ec.message.addMessage("PayTrace API error")
                    return
                }
                responseMap = restResponse.jsonObject()
            ]]></script>

            <set field="paymentOperationEnumId" value="PgoCapture"/>
            <service-call name="PayTrace.PayTraceVaultPaymentServices.save#Response" in-map="context" out-map="context"/>
        </actions>
    </service>
    <service verb="authorizeAndCapture" noun="Payment">
        <description>
            This service is an alternative to the authorize and capture services, doing both in asingle operation.
            If used should generally be configured as the Paytrace service with no capture service set.
        </description>
        <implements service="mantle.account.PaymentServices.authorize#Payment"/>
        <out-parameters>
            <parameter name="responseMap" type="Map"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.account.payment.Payment" value-field="payment"/>
            <if condition="payment == null"><return message="Payment ${paymentId} not found"/></if>
            <set field="paymentMethod" from="payment.'mantle.account.method.PaymentMethod'"/>
            <if condition="paymentMethod?.paymentMethodTypeEnumId != 'PmtCreditCard'">
                <return error="true" message="Cannot authorize and capture payment ${paymentId}, not a Credit Card payment."/>
            </if>

            <!-- if no gatewayCimId, store the PaymentMethod on CIM -->
            <if condition="!paymentMethod.gatewayCimId">
                <service-call name="PayTrace.PayTraceVaultServices.store#CustomerPaymentMethod"
                            in-map="[paymentMethodId:paymentMethod.paymentMethodId, paymentId:paymentId, paymentGatewayConfigId:paymentGatewayConfigId]"/>
                <set field="paymentMethod" from="payment.'mantle.account.method.PaymentMethod'"/>
            </if>
            <!-- get party after CIM check so that gatewayCimId will be populated -->
            <set field="party" from="paymentMethod.'Owner#mantle.party.Party'"/>
            <if condition="!party.gatewayCimId"><return message="Party ${party.partyId} has no gateway CIM ID, not processing payment"/></if>
            <if condition="!paymentMethod.gatewayCimId"><return message="Payment Method ${paymentMethod.paymentMethodId} has no gateway CIM ID, not processing payment"/></if>


            <if condition="!cardSecurityCode">
                <set field="creditCard" from="payment.'mantle.account.method.CreditCard'"/>
                <set field="cardSecurityCode" from="creditCard?.cardSecurityCode"/>
            </if>

            <entity-find-one entity-name="PayTrace.PaymentGatewayPayTrace" value-field="pgpt"/> 
            <if condition="pgpt == null"><return error="true" message="No PaymentGatewayPayTrace found with ID ${paymentGatewayConfigId}"/></if>

            <service-call name="PayTrace.PayTraceVaultPaymentServices.payTrace#login" in-map="context" out-map="token"/>

            <!-- assemble the full request Map -->
            <set field="requestMap" from="[amount:payment.amount, customer_id:paymentMethod.gatewayCimId, integrator_id: pgpt.integratorId]"/>

            <script><![CDATA[
                org.moqui.util.RestClient restClient = ec.service.rest().method(org.moqui.util.RestClient.POST)
                .addHeader("Authorization", "bearer ${token.token.access_token}")
                .addHeader("Content-Type", "application/json").jsonObject(requestMap)
                restClient.uri().protocol("https").host(pgpt.hostName).port(443).path(pgpt.apiVersion).path("transactions").path("sale").path("by_customer").build()
                org.moqui.util.RestClient.RestResponse restResponse = restClient.call()
                    
                if (restResponse.statusCode < 200 || restResponse.statusCode >= 500) {
                    ec.logger.error("PayTrace API response ${restResponse.statusCode}")
                    ec.message.addMessage("PayTrace API error")
                    return
                }
                responseMap = restResponse.jsonObject()
            ]]></script>

            <set field="paymentOperationEnumId" value="PgoAuthAndCapture"/>
            <service-call name="PayTrace.PayTraceVaultPaymentServices.save#Response" in-map="context" out-map="context"/>
        </actions>
    </service>
    <service verb="refund" noun="Payment">
        <implements service="mantle.account.PaymentServices.refund#Payment"/>
        <actions>
            <entity-find-one entity-name="mantle.account.payment.Payment" value-field="payment"/>
            <if condition="payment == null"><return message="Payment ${paymentId} not found"/></if>
            <set field="paymentMethod" from="payment.'mantle.account.method.PaymentMethod'"/>
            <if condition="paymentMethod?.paymentMethodTypeEnumId != 'PmtCreditCard'">
                <return error="true" message="Cannot authorize and capture payment ${paymentId}, not a Credit Card payment."/>
            </if>

            <if condition="!cardSecurityCode">
                <set field="creditCard" from="payment.'mantle.account.method.CreditCard'"/>
                <set field="cardSecurityCode" from="creditCard?.cardSecurityCode"/>
            </if>
                
            <!-- get party after CIM check so that gatewayCimId will be populated -->
            <set field="party" from="paymentMethod.'Owner#mantle.party.Party'"/>
            <if condition="!party.gatewayCimId"><return message="Party ${party.partyId} has no gateway CIM ID, not processing payment"/></if>
            <if condition="!paymentMethod.gatewayCimId"><return message="Payment Method ${paymentMethod.paymentMethodId} has no gateway CIM ID, not processing payment"/></if>

            <!-- assemble the full request Map -->
            <set field="requestMap" from="[amount:payment.amount, customer_id: paymentMethod.gatewayCimId]"/>

            <entity-find-one entity-name="PayTrace.PaymentGatewayPayTrace" value-field="pgpt"/> 
            <if condition="pgpt == null"><return error="true" message="No PaymentGatewayPayTrace found with ID ${paymentGatewayConfigId}"/></if>

            <service-call name="PayTrace.PayTraceVaultPaymentServices.payTrace#login" in-map="context" out-map="token"/>

            <script><![CDATA[
                org.moqui.util.RestClient restClient = ec.service.rest().method(org.moqui.util.RestClient.POST)
                .addHeader("Authorization", "bearer ${token.token.access_token}")
                .addHeader("Content-Type", "application/json").jsonObject(requestMap)
                restClient.uri().protocol("https").host(pgpt.hostName).port(443).path(pgpt.apiVersion).path("transactions").path("refund").path("to_customer").build()
                org.moqui.util.RestClient.RestResponse restResponse = restClient.call()
                    
                if (restResponse.statusCode < 200 || restResponse.statusCode >= 500) {
                    ec.logger.error("PayTrace API response ${restResponse.statusCode}")
                    ec.message.addMessage("PayTrace API error")
                    return
                }
                responseMap = restResponse.jsonObject()
            ]]></script>

            <set field="paymentOperationEnumId" value="PgoRefund"/>
            <service-call name="PayTrace.PayTraceVaultPaymentServices.save#Response" in-map="context" out-map="context"/>
        </actions>
    </service>
    <service verb="release" noun="Payment">
        <implements service="mantle.account.PaymentServices.release#Payment"/>
        <actions>
            <entity-find-one entity-name="mantle.account.payment.Payment" value-field="payment"/>
            <if condition="payment == null"><return message="Payment ${paymentId} not found"/></if>
            <set field="paymentMethod" from="payment.'mantle.account.method.PaymentMethod'"/>
            <if condition="paymentMethod?.paymentMethodTypeEnumId != 'PmtCreditCard'">
                <return error="true" message="Cannot release authorization for payment ${paymentId}, not a Credit Card payment."/>
            </if>
            <!-- if no gatewayCimId, store the PaymentMethod on CIM -->
            <if condition="!paymentMethod.gatewayCimId">
                <service-call name="PayTrace.PayTraceVaultServices.store#CustomerPaymentMethod"
                            in-map="[paymentMethodId:paymentMethod.paymentMethodId, paymentId:paymentId, paymentGatewayConfigId:paymentGatewayConfigId]"/>
                <set field="paymentMethod" from="payment.'mantle.account.method.PaymentMethod'"/>
            </if>
            <!-- get party after CIM check so that gatewayCimId will be populated -->
            <set field="party" from="paymentMethod.'Owner#mantle.party.Party'"/>
            <if condition="!party.gatewayCimId"><return message="Party ${party.partyId} has no gateway CIM ID, not processing payment"/></if>
            <if condition="!paymentMethod.gatewayCimId"><return message="Payment Method ${paymentMethod.paymentMethodId} has no gateway CIM ID, not processing payment"/></if>
 
            <entity-find-one entity-name="PayTrace.PaymentGatewayPayTrace" value-field="pgpt"/> 
            <if condition="pgpt == null"><return error="true" message="No PaymentGatewayPayTrace found with ID ${paymentGatewayConfigId}"/></if>

            <set field="paymentRefNum" from="payment.paymentRefNum"/>
            <if condition="!paymentRefNum">
                <service-call name="mantle.account.PaymentServices.get#AuthorizePaymentGatewayResponse" in-map="context" out-map="context"/>
                <if condition="!paymentGatewayResponse"><return error="true" message="Could not find successful authorization for Payment ${paymentId}"/></if>
                <set field="paymentRefNum" from="paymentGatewayResponse.referenceNum"/>
            </if>
            <if condition="!paymentRefNum"><return error="true" message="Could not find authorization transaction ID (reference number) for Payment ${paymentId}"/></if>
                
            <!-- assemble the full request Map -->
            <set field="requestMap" from="[transaction_id:paymentRefNum]"/>

            <service-call name="PayTrace.PayTraceVaultPaymentServices.payTrace#login" in-map="context" out-map="token"/>

            <set field="paymentOperationEnumId" value="PgoRelease"/>

            <script><![CDATA[
                org.moqui.util.RestClient restClient = ec.service.rest().method(org.moqui.util.RestClient.POST)
                .addHeader("Authorization", "bearer ${token.token.access_token}")
                .addHeader("Content-Type", "application/json").jsonObject(requestMap)
                restClient.uri().protocol("https").host(pgpt.hostName).port(443).path(pgpt.apiVersion).path("transactions").path("void").build()
                org.moqui.util.RestClient.RestResponse restResponse = restClient.call()
                    
                if (restResponse.statusCode < 200 || restResponse.statusCode >= 500) {
                    ec.logger.error("PayTrace API response ${restResponse.statusCode}")
                    ec.message.addMessage("PayTrace API error")
                    return
                }
                responseMap = restResponse.jsonObject()
            ]]></script>
                
            <service-call name="PayTrace.PayTraceVaultPaymentServices.save#Response" in-map="context" out-map="context"/>

        </actions>
    </service>
    <service verb="get" noun="PaymentGatewayDetails">
        <implements service="mantle.account.PaymentServices.get#PaymentGatewayDetails"/>
        <out-parameters>
            <parameter name="transactionStatus"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.account.payment.Payment" value-field="payment"/>
            <if condition="payment == null"><return message="Payment ${paymentId} not found"/></if>
            <set field="paymentMethod" from="payment.'mantle.account.method.PaymentMethod'"/>
            <if condition="paymentMethod?.paymentMethodTypeEnumId != 'PmtCreditCard'">
                <return message="Cannot get transaction details for payment ${paymentId}, not a Credit Card payment."/>
            </if>

            <entity-find-one entity-name="PayTrace.PaymentGatewayPayTrace" value-field="pgpt"/> 
            <if condition="pgpt == null"><return error="true" message="No PaymentGatewayPayTrace found with ID ${paymentGatewayConfigId}"/></if>

            <set field="referenceNum" from="payment.paymentRefNum"/>
            <if condition="!referenceNum">
                <service-call name="mantle.account.PaymentServices.get#AuthorizePaymentGatewayResponse" in-map="context" out-map="context"/>
                <set field="referenceNum" from="paymentGatewayResponse?.referenceNum"/>
            </if>
            <if condition="!referenceNum"><return message="Could not find transaction ID (reference number) for Payment ${paymentId}"/></if>

            <set field="paymentOperationEnumId" value="PgoTxDetails"/>
                
            <!-- assemble the full request Map -->
            <set field="requestMap" from="[transaction_id:referenceNum]"/>

            <service-call name="PayTrace.PayTraceVaultPaymentServices.payTrace#login" in-map="context" out-map="token"/>

            <script><![CDATA[
                org.moqui.util.RestClient restClient = ec.service.rest().method(org.moqui.util.RestClient.POST)
                .addHeader("Authorization", "bearer ${token.token.access_token}")
                .addHeader("Content-Type", "application/json").jsonObject(requestMap)
                restClient.uri().protocol("https").host(pgpt.hostName).port(443).path(pgpt.apiVersion).path("transactions").path("export").path("by_id").build()
                org.moqui.util.RestClient.RestResponse restResponse = restClient.call()
                    
                if (restResponse.statusCode < 200 || restResponse.statusCode >= 500) {
                    ec.logger.error("PayTrace API response ${restResponse.statusCode}")
                    ec.message.addMessage("PayTrace API error")
                    return
                }
                responseMap = restResponse.jsonObject()
            ]]></script>

            <!-- PayTrace transactionType values and corresponding Payment statusId to determine needed action:
            
                SALE           PmntDelivered
                AUTHORIZATION  PmntAuthorized
                REFUND         PmntConfirmed 
                VOID           PmntVoid
                CAPTURE        PmntDelivered
                FORCESALE      PmntDelivered
                SETTLED        PmntConfirmed 
                PENDING        PmntDelivered
                DECLINED       PmntDeclined
                -->
                
            <set field="transactionStatus" from="responseMap.transaction_type"/>
            <if condition="transactionStatus">
                <set field="payTraceStatusMap" from="[AUTHORIZATION:'PmntAuthorized', 
                    REFUND:'PmntConfirmed', SALE:'PmntDelivered',FORCESALE:'PmntDelivered',  
                    CAPTURE:'PmntDelivered', SETTLED:'PmntConfirmed', PENDING:'PmntDelivered',
                    DECLINED:'PmntDeclined', VOID:'PmntVoid']"/>
                <set field="gatewayStatusId" from="payTraceStatusMap.get(transactionStatus.trim())"/>
            </if>

            <set field="referenceNum" from="responseMap.transactions?.transaction_id"/>

            <if condition="!gatewayStatusId || gatewayStatusId != payment.statusId">
                <!-- save PaymentGatewayResponse including transaction status -->
                <set field="responseCode" from="responseMap.success"/>
                <set field="reasonCode" from="responseMap.transactions?.approval_code"/>
                <set field="reasonMessage" from="responseMap.transactions.approval_message"/>
                <set field="statusCode" from="responseMap.transactions?.status_code"/>

                <service-call name="create#mantle.account.method.PaymentGatewayResponse" out-map="context"
                        in-map="[paymentGatewayConfigId:paymentGatewayConfigId, paymentOperationEnumId:paymentOperationEnumId, 
                        paymentId:payment.paymentId, paymentMethodId:payment.paymentMethodId, referenceNum:referenceNum, 
                        amount:payment.amount, amountUomId:payment.amountUomId, transactionDate:ec.user.nowTimestamp, 
                        responseCode:responseCode, reasonCode:reasonCode, reasonMessage:reasonMessage,
                        resultError:(responseCode ? 'N' : 'Y'), resultDeclined:(statusCode == 'N' ? 'Y' : 'N'), transactionStatus:transactionStatus]"/>
            </if>
        </actions>      
    </service>

    <service verb="save" noun="Response">
        <in-parameters>
            <parameter name="paymentId"/>
            <parameter name="paymentMethodId"/>
            <parameter name="paymentGatewayConfigId"/>
            <parameter name="paymentOperationEnumId" required="true"/>
            <parameter name="responseMap" type="Map" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="paymentGatewayResponseId"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.account.payment.Payment" value-field="payment"/>
            <if condition="payment &amp;&amp; !paymentMethodId"><set field="paymentMethodId" from="payment.paymentMethodId"/></if>

            <set field="responseCode" from="responseMap.success"/>
            <set field="approvalCode" from="responseMap.approval_code"/>
            <set field="avsResult" from="responseMap.avs_response"/>
            <set field="cvResult" from="responseMap.csc_response"/>
            <set field="reasonCode" from="responseMap.response_code"/>
            <set field="reasonMessage" from="responseMap.status_message"/>
            <set field="referenceNum" from="responseMap.transaction_id"/>
            <set field="errors" from="responseMap?.errors"/>
            <set field="badCardNumber" from="errors?.'35'"/>
            <set field="badExpireMonth" from="errors?.'43'"/>
            <set field="badExpireYear" from="errors?.'44'"/>

            <service-call name="create#mantle.account.method.PaymentGatewayResponse" out-map="context"
                in-map="[paymentGatewayConfigId:paymentGatewayConfigId, paymentOperationEnumId:paymentOperationEnumId, 
                paymentId:paymentId, paymentMethodId:paymentMethodId, 
                amount:payment.amount, amountUomId:payment?.amountUomId, referenceNum:referenceNum, 
                approvalCode:approvalCode, responseCode:responseCode, 
                reasonCode:reasonCode, reasonMessage:reasonMessage, 
                avsResult:avsResult, cvResult:cvResult, 
                transactionDate:ec.user.nowTimestamp, 
                resultSuccess:(reasonCode == 101 || reasonCode == 112 ? 'Y' : 'N'), resultDeclined:(responseMap.reasonCode == 102 || reasonCode == 113 ? 'Y' : 'N'), 
                resultError:(reasonCode == 1 ? 'Y' : 'N'), 
                resultBadExpire:(badExpireMonth || badExpireYear ? 'Y' : 'N'), 
                resultBadCardNumber:(badCardNumber ? 'Y' : 'N')]"/>        
        </actions>
    </service>

    <service verb="payTrace" noun="login">
        <in-parameters>
            <parameter name="paymentGatewayConfigId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="token" type="Map"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="PayTrace.PaymentGatewayPayTrace" value-field="pgpt"/> 
            <if condition="pgpt == null"><return error="true" message="No PaymentGatewayPayTrace found with ID ${paymentGatewayConfigId}"/></if>

            <!-- assemble the full request Map -->
            <set field="requestMap" from="[grant_type:'password',username:pgpt.username,password:pgpt.password]"/>
            <script><![CDATA[
                org.moqui.util.RestClient restClient = ec.service.rest().method(org.moqui.util.RestClient.POST).addHeader("Content-Type", "application/json").jsonObject(requestMap)
                restClient.uri().protocol("https").host(pgpt.hostName).port(443).path("oauth").path("token").build()
                org.moqui.util.RestClient.RestResponse restResponse = restClient.call()
                    
                if (restResponse.statusCode < 200 || restResponse.statusCode >= 500) {
                    ec.logger.error("PayTrace API response ${restResponse.statusCode}")
                    ec.message.addMessage("PayTrace API error")
                    return
                }
                token = restResponse.jsonObject()
            ]]></script> 
        </actions>
    </service>
</services>